{"meta":{"title":"Amit Anand","subtitle":"Few things to share","description":null,"author":"Amit Anand","url":"http://blog.amitanand.net"},"pages":[{"title":"About me","date":"2016-07-09T17:08:55.000Z","updated":"2016-07-09T20:24:23.514Z","comments":false,"path":"about/index.html","permalink":"http://blog.amitanand.net/about/index.html","excerpt":"","text":"Hello! My name is Amit Anand. I can be reached at anandkamith at gmail dot com."},{"title":"resume","date":"2016-07-09T17:45:51.000Z","updated":"2016-07-09T17:47:03.362Z","comments":false,"path":"resume/index.html","permalink":"http://blog.amitanand.net/resume/index.html","excerpt":"","text":"wola!!"}],"posts":[{"title":"Understanding Hive HA","slug":"understand-hive-ha","date":"2016-07-16T18:08:48.000Z","updated":"2016-07-16T16:25:16.771Z","comments":true,"path":"2016/07/16/understand-hive-ha/","link":"","permalink":"http://blog.amitanand.net/2016/07/16/understand-hive-ha/","excerpt":"In my blog Enable HA for HiveServer2, I talked about configuration that is needed to enable High Availability (HA) for HiveServer2 (HS2). In this blog I want to take a deep dive into the architecture behind HA of HS2. Let’s start with understanding the core components involved.","text":"In my blog Enable HA for HiveServer2, I talked about configuration that is needed to enable High Availability (HA) for HiveServer2 (HS2). In this blog I want to take a deep dive into the architecture behind HA of HS2. Let’s start with understanding the core components involved. JDBC Client – A client application/user that uses a JDBC connection URL to talk to ZooKeeper to get connection information about one of the HS2. The connection string is in the form of1jdbc:hive2://&lt;ZKS:PORT&gt;/&lt;DB&gt;;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2; Where ZKS is list of zookeeper servers separated by a comma PORT is zookeeper client port DB is the Hive Database you want to connect to ZooKeeper – A state store that registers multiple instances of HS2 and returns one of them when a client requests for it. The Zookeeper Znode upon query will show something like 1234ubuntu@bcpc-vm1:~$ zookeeper-client -server f-bcpc-vm1.bcpc.example.com:2181 ls /HiveServer2Connecting to f-bcpc-vm1.bcpc.example.com:2181[serverUri=f-bcpc-vm2.bcpc.example.com:10000;version=1.2.1.2.3.4.0-3485;sequence=0000000007] HiveServer2 – More than once instance of HS2 running on either same machine using different port number or running multiple machines using same/different port number Hadoop Cluster – A client reads/writes data from after connecting to HS2. Below is the step by step explanation of how a client session gets established with HS2 Step 1A JDBC client connects to ZooKeeper ensemble to discover currently registered HS2 instances using URL akin to 1jdbc:hive2://&lt;ZKS:PORT&gt;/&lt;DB&gt;;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2; Step 2ZK retrieves connection information for one of the registered HS2 and returns it to the client Step 3Upon receiving connection information from ZK, a client attempts to connect to HS2 Step 4After making a connection to HS2, client continues to read/write data from Hadoop Cluster Unregister a HiveServer2 instance from ZookeeperThere are two ways to remove a registered HS2 instance from ZK Remove Znode from ZKLaunch the Zookeeper command line interface:1Zookeeper-client -server f-bcpc-vm1.bcpc.example.com:2181 Run the following command to list all registered instances1ls /HiveServer2 You should see something similar to:12[serverUri=f-bcpc-vm2.bcpc.example.com:10000;version=1.2.1.2.3.4.0-3485;sequence=0000000007][serverUri=f-bcpc-vm3.bcpc.example.com:10000;version=1.2.1.2.3.4.0-3485;sequence=0000000008] To remove a particular registered instance, in ZK command line interface, execute following command:1delete /HiveServer2/serverUri=f-bcpc-vm2.bcpc.example.com:10000;version=1.2.1.2.3.4.0-3485;sequence=0000000007 Use HS2 deregister commandTo remove all registered instances, execute the following command from the command line:1hive --service hiveserverf2 --deregister &lt;version number&gt; Example:1hive --service hiveserver2 --deregister 1.2.1.2.3.4.0-3485 Please note that after deregistering the HS2 from ZK, the deregistered HS2 will not be returned for any new client connections. However, any active client sessions are not impacted by this.","categories":[{"name":"Hive","slug":"Hive","permalink":"http://blog.amitanand.net/categories/Hive/"}],"tags":[{"name":"Hive","slug":"Hive","permalink":"http://blog.amitanand.net/tags/Hive/"},{"name":"SQL","slug":"SQL","permalink":"http://blog.amitanand.net/tags/SQL/"},{"name":"Hiveserver2","slug":"Hiveserver2","permalink":"http://blog.amitanand.net/tags/Hiveserver2/"},{"name":"HS2","slug":"HS2","permalink":"http://blog.amitanand.net/tags/HS2/"}]},{"title":"Enable HA for HiveServer2","slug":"hive-ha","date":"2016-07-09T23:20:48.933Z","updated":"2016-07-09T23:20:48.933Z","comments":true,"path":"2016/07/09/hive-ha/","link":"","permalink":"http://blog.amitanand.net/2016/07/09/hive-ha/","excerpt":"In this blog I am going to show you how to enable High Availability for HiveServer2. The HiveServer2, like NameNode that at present only allow 2 nodes, does not have any limit on number of servers that can be added to HA configuration. Also it doesn’t provide any fail-over mechanism. A client will have to reconnect, in case a connection to current HiveServer2 is lost. Below are the requirements to enable High Availability for HiveServer2.","text":"In this blog I am going to show you how to enable High Availability for HiveServer2. The HiveServer2, like NameNode that at present only allow 2 nodes, does not have any limit on number of servers that can be added to HA configuration. Also it doesn’t provide any fail-over mechanism. A client will have to reconnect, in case a connection to current HiveServer2 is lost. Below are the requirements to enable High Availability for HiveServer2. ZooKeeperZookeeper is used to store information about each HS2 instance that is launched and registered with Zookeeper. A client, upon connection request, gets one of the registered HS2 instance. Multiple HiveServer2 instancesTo enable HA more than one instance of HS2 is required. Multiple instances can run either on the same server with different port for each instance or on two different machines using same port number. If one of the instance fails, Zookeeper will return the next active HS2 instance. Running multiple instances provides following benefits: High Availability Load Balancing Rolling Upgrade It is also possible to have HS2 instances configured with different authentication scheme. For example, four instances can be configured with first two instances running on port 10000 using Kerberos authentication and other two running on port 10001 using LDAP authentication. ConfigurationLet’s look at the configuration that is needed for running multiple instances of HS2 Parameter Description hive.zookeeper.quorum The list of Zookeeper servers to talk to. hive.zookeeper.session.timeout Zookeeper client’s session timeout. The client is disconnected, and as a result, all locks released, if a heartbeat is not sent in the timeout hive.zookeeper.namespace The parent node under which all Zookeeper nodes are created. hive.server2.support.dynamic.service.discovery Set to true to enable HiveServer2 dynamic service discovery for its clients Sample configuration:Below configuration is deployed on two different hosts. HiveServer2 will be running on default port of 10000. 12345678910111213141516&lt;property&gt; &lt;name&gt;hive.zookeeper.quorum&lt;/name&gt; &lt;value&gt;f-bcpc-vm1:2181,f-bcpc-vm2.bcpc:2181,f-bcpc-vm3.bcpc:2181&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hive.zookeeper.session.timeout&lt;/name&gt; &lt;value&gt;600000&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hive.zookeeper.namespace&lt;/name&gt; &lt;value&gt;hiveserver2&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hive.server2.support.dynamic.service.discovery&lt;/name&gt; &lt;value&gt;true&lt;/value&gt;&lt;/property&gt; At this stage after adding the configuration restart HiveServer2 instance. Please do take a moment to look at Znodes created under /hiveserver2 in Zookeeper. After enabling HA one can connect to HS using syntax given below:1234567891011121314151617181920212223ubuntu@bcpc-vm8:~$ export zk=\"f-bcpc-vm1:2181,f-bcpc-vm2:2181,f-bcpc-vm3:2181\"ubuntu@bcpc-vm8:~$ export bl=\"jdbc:hive2://$&#123;zk&#125;/default;serviceDiscoveryMode=zooKeeper;\"ubuntu@bcpc-vm8:~$ beeline -u \"$&#123;bl&#125;zooKeeperNamespace=hiveserver2\"Connected to: Apache Hive (version 1.2.1.2.3.4.0-3485)Driver: Hive JDBC (version 1.2.1.2.3.4.0-3485)Transaction isolation: TRANSACTION_REPEATABLE_READBeeline version 1.2.1.2.3.4.0-3485 by Apache Hive0: jdbc:hive2://f-bcpc-vm1.bcpc.example.com:2&gt; select * from test limit 10;+----------+-------------+--+| test.id | test.idval |+----------+-------------+--+| id0001 | value0001 || id0002 | value0002 || id0003 | value0003 || id0004 | value0004 || id0005 | value0005 || id0006 | value0006 || id0007 | value0007 || id0008 | value0008 || id0009 | value0009 || id0010 | value0010 |+----------+-------------+--+10 rows selected (2.102 seconds) In my next blog I will explain the architecture behind Hive HA.","categories":[{"name":"Hive","slug":"Hive","permalink":"http://blog.amitanand.net/categories/Hive/"}],"tags":[{"name":"Hive","slug":"Hive","permalink":"http://blog.amitanand.net/tags/Hive/"},{"name":"HIVEQL","slug":"HIVEQL","permalink":"http://blog.amitanand.net/tags/HIVEQL/"},{"name":"SQL","slug":"SQL","permalink":"http://blog.amitanand.net/tags/SQL/"},{"name":"Hiveserver2","slug":"Hiveserver2","permalink":"http://blog.amitanand.net/tags/Hiveserver2/"},{"name":"HS2","slug":"HS2","permalink":"http://blog.amitanand.net/tags/HS2/"}]}]}